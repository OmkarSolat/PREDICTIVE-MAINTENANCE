# -*- coding: utf-8 -*-
"""Predictive_Maintenence_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q-E0MgR1k4VqLriJ8zUg0ZBV6hbLjrEA

# Model Deployment
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
import pickle
import streamlit as st


def main():
    st.set_page_config(page_title="Predictive Maintenance", layout="centered")

    # Load the model and scaler
    try:
        model = pickle.load(open('rf_model.pkl', 'rb'))
        scaler = pickle.load(open('scaler.pkl', 'rb'))
    except FileNotFoundError as e:
        st.error(f"Model or scaler file not found: {str(e)}")
        return

    # Title and description
    st.markdown(
        """
        <style>
        .title { background-color: #007ACC; color: white; padding: 15px; border-radius: 8px; text-align: center; }
        .description { font-size: 16px; margin: 15px 0; }
        </style>
        <div class="title">Machine Failure Prediction App</div>
        <p class="description">Predict machine failures using real-time sensor data. Input details manually or upload a dataset.</p>
        """, unsafe_allow_html=True
    )

    # File uploader
    uploaded_file = st.file_uploader("Upload Dataset (Excel file)", type=["xlsx"])
    if uploaded_file:
        try:
            # Read uploaded file
            df_uploaded = pd.read_excel(uploaded_file)

            # Check for required columns
            required_columns = ['Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]']
            if not all(col in df_uploaded.columns for col in required_columns):
                st.error("The uploaded dataset does not have the required columns.")
                return

            # Scale the features
            df_uploaded_scaled = scaler.transform(df_uploaded[required_columns])

            # Predict on the entire dataset
            predictions_proba = model.predict_proba(df_uploaded_scaled)
            threshold = 0.4  # Adjusted threshold
            predictions = [1 if proba[1] >= threshold else 0 for proba in predictions_proba]
            df_uploaded['Failure Prediction'] = ['Failure' if pred == 1 else 'No Failure' for pred in predictions]

            # Display results
            st.write("Predictions on Uploaded Dataset:")
            st.dataframe(df_uploaded)

            # Download option
            st.download_button(
                label="Download Predictions as CSV",
                data=df_uploaded.to_csv(index=False),
                file_name="predictions.csv",
                mime="text/csv"
            )
        except Exception as e:
            st.error(f"An error occurred while processing the file: {str(e)}")
        return

    # Sidebar for manual inputs
    st.sidebar.header("Input Sensor Data")
    air_temp = st.sidebar.number_input("Air Temperature [K]", min_value=270.0, max_value=320.0, value=300.0, step=0.1)
    process_temp = st.sidebar.number_input("Process Temperature [K]", min_value=270.0, max_value=400.0, value=350.0, step=0.1)
    rotational_speed = st.sidebar.number_input("Rotational Speed [rpm]", min_value=100.0, max_value=3000.0, value=1500.0, step=10.0)
    torque = st.sidebar.number_input("Torque [Nm]", min_value=0.0, max_value=100.0, value=50.0, step=1.0)
    tool_wear = st.sidebar.number_input("Tool Wear [min]", min_value=0.0, max_value=400.0, value=200.0, step=1.0)

    # Prepare data for manual input prediction
    input_data = pd.DataFrame({
        'Air temperature [K]': [air_temp],
        'Process temperature [K]': [process_temp],
        'Rotational speed [rpm]': [rotational_speed],
        'Torque [Nm]': [torque],
        'Tool wear [min]': [tool_wear]
    })

    # Scale input data
    input_data_scaled = scaler.transform(input_data)

    # Predict button
    if st.button("Predict Machine Failure"):
        prediction_proba = model.predict_proba(input_data_scaled)[0]
        threshold = 0.4  # Adjusted threshold
        prediction = 1 if prediction_proba[1] >= threshold else 0

        # Display result
        st.write(f"Prediction Probabilities: {prediction_proba}")
        if prediction == 1:
            st.markdown(
                """
                <div style="background-color:#FF4B4B; color:white; padding:10px; border-radius:8px; text-align:center;">
                <h3>Machine Failure Detected</h3>
                </div>
                """, unsafe_allow_html=True
            )
        else:
            st.markdown(
                """
                <div style="background-color:#4CAF50; color:white; padding:10px; border-radius:8px; text-align:center;">
                <h3>No Machine Failure</h3>
                </div>
                """, unsafe_allow_html=True
            )


if __name__ == "__main__":
    main()